import { createConnection } from 'mysql2/promise';
import * as dotenv from 'dotenv';

dotenv.config();

async function runSimpleSeed() {
  console.log('üå± Starting simple seed with raw SQL...');

  const connection = await createConnection({
    host: process.env.DB_HOST || 'localhost',
    port: Number(process.env.DB_PORT) || 3306,
    user: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'hemidi_database',
  });

  try {
    // Insert Categories
    console.log('üìÇ Inserting categories...');
    await connection.execute(`
      INSERT IGNORE INTO categories (name, description, code, is_active, created_at) VALUES
      ('ƒêi·ªán t·ª≠', 'Thi·∫øt b·ªã ƒëi·ªán t·ª≠ v√† ph·ª• ki·ªán', 'DT', true, NOW()),
      ('Th·ªùi trang', 'Qu·∫ßn √°o v√† ph·ª• ki·ªán th·ªùi trang', 'TT', true, NOW()),
      ('S√°ch', 'S√°ch v√† t√†i li·ªáu h·ªçc t·∫≠p', 'SA', true, NOW()),
      ('Gia d·ª•ng', 'ƒê·ªì gia d·ª•ng v√† n·ªôi th·∫•t', 'GD', true, NOW()),
      ('Th·ªÉ thao', 'ƒê·ªì th·ªÉ thao v√† outdoor', 'TS', true, NOW())
    `);

    // Insert Warehouses
    console.log('üè¢ Inserting warehouses...');
    await connection.execute(`
      INSERT IGNORE INTO warehouses (name, code, address, phone, email, manager_name, is_active, created_at) VALUES
      ('Kho Trung T√¢m', 'KTT', '123 ƒê∆∞·ªùng Nguy·ªÖn VƒÉn Linh, Q.7, TP.HCM', '028-1234-5678', 'kho.trung.tam@hemidi.com', 'Nguy·ªÖn VƒÉn A', true, NOW()),
      ('Kho Mi·ªÅn B·∫Øc', 'KMB', '456 ƒê∆∞·ªùng L√°ng, ƒê·ªëng ƒêa, H√† N·ªôi', '024-9876-5432', 'kho.mien.bac@hemidi.com', 'Tr·∫ßn Th·ªã B', true, NOW()),
      ('Kho Mi·ªÅn T√¢y', 'KMT', '789 ƒê∆∞·ªùng 3/2, Ninh Ki·ªÅu, C·∫ßn Th∆°', '0292-111-2222', 'kho.mien.tay@hemidi.com', 'L√™ VƒÉn C', true, NOW())
    `);

    // Get category IDs
    const [categories] = await connection.execute(
      'SELECT id, code FROM categories',
    );
    const categoryMap = new Map();
    (categories as any[]).forEach((cat) => categoryMap.set(cat.code, cat.id));

    // Insert Products
    console.log('üì± Inserting products...');
    const products = [
      [
        'iPhone 15 Pro Max',
        'ƒêi·ªán tho·∫°i th√¥ng minh cao c·∫•p t·ª´ Apple',
        'IPH15PM256',
        '8901234567890',
        28990000,
        25000000,
        'chi·∫øc',
        5,
        50,
        categoryMap.get('DT'),
      ],
      [
        'Samsung Galaxy S24 Ultra',
        'Flagship Android v·ªõi b√∫t S Pen',
        'SGS24U512',
        '8901234567891',
        31990000,
        28000000,
        'chi·∫øc',
        3,
        30,
        categoryMap.get('DT'),
      ],
      [
        'MacBook Air M3',
        'Laptop si√™u m·ªèng v·ªõi chip Apple M3',
        'MBAM3256',
        '8901234567892',
        32990000,
        29000000,
        'chi·∫øc',
        2,
        20,
        categoryMap.get('DT'),
      ],
      [
        'iPad Pro 11"',
        'M√°y t√≠nh b·∫£ng chuy√™n nghi·ªáp',
        'IPP11256',
        '8901234567893',
        22990000,
        20000000,
        'chi·∫øc',
        3,
        25,
        categoryMap.get('DT'),
      ],
      [
        'AirPods Pro 2',
        'Tai nghe kh√¥ng d√¢y ch·ªëng ·ªìn',
        'APP2USB',
        '8901234567894',
        6290000,
        5000000,
        'chi·∫øc',
        10,
        100,
        categoryMap.get('DT'),
      ],
      [
        '√Åo Polo Nam Uniqlo',
        '√Åo polo cotton co gi√£n tho√°ng m√°t',
        'APM-UNI-BLU-L',
        '8901234567895',
        399000,
        250000,
        'chi·∫øc',
        20,
        100,
        categoryMap.get('TT'),
      ],
      [
        'Gi√†y Nike Air Force 1',
        'Gi√†y th·ªÉ thao classic m√†u tr·∫Øng',
        'GNK-AF1-WHT-42',
        '8901234567896',
        2890000,
        2200000,
        'ƒë√¥i',
        10,
        60,
        categoryMap.get('TT'),
      ],
      [
        "Qu·∫ßn Jeans Levi's 501",
        'Qu·∫ßn jeans classic straight fit',
        'QJ-LV501-BLU-32',
        '8901234567897',
        1590000,
        1200000,
        'chi·∫øc',
        15,
        80,
        categoryMap.get('TT'),
      ],
      [
        '√Åo Kho√°c Adidas',
        '√Åo kho√°c th·ªÉ thao 3 s·ªçc',
        'AK-ADI-BLK-XL',
        '8901234567898',
        1290000,
        900000,
        'chi·∫øc',
        12,
        70,
        categoryMap.get('TT'),
      ],
      [
        'Clean Code - Robert Martin',
        'S√°ch l·∫≠p tr√¨nh v·ªÅ vi·∫øt code s·∫°ch',
        'BOOK-CC-VN',
        '8901234567899',
        250000,
        180000,
        'cu·ªën',
        15,
        80,
        categoryMap.get('SA'),
      ],
      [
        'Design Patterns GoF',
        'S√°ch v·ªÅ m·∫´u thi·∫øt k·∫ø ph·∫ßn m·ªÅm',
        'BOOK-DP-VN',
        '8901234567900',
        320000,
        220000,
        'cu·ªën',
        12,
        60,
        categoryMap.get('SA'),
      ],
      [
        'JavaScript: The Good Parts',
        'S√°ch JavaScript cƒÉn b·∫£n',
        'BOOK-JS-EN',
        '8901234567901',
        280000,
        200000,
        'cu·ªën',
        18,
        90,
        categoryMap.get('SA'),
      ],
      [
        'M√°y H√∫t B·ª•i Dyson V15',
        'M√°y h√∫t b·ª•i kh√¥ng d√¢y laser',
        'MHB-DYS-V15',
        '8901234567902',
        18990000,
        15000000,
        'chi·∫øc',
        3,
        15,
        categoryMap.get('GD'),
      ],
      [
        'N·ªìi C∆°m ƒêi·ªán Toshiba',
        'N·ªìi c∆°m ƒëi·ªán cao t·∫ßn 1.8L',
        'NCD-TSB-18L',
        '8901234567903',
        2890000,
        2200000,
        'chi·∫øc',
        5,
        30,
        categoryMap.get('GD'),
      ],
      [
        'B√†n ·ª¶i H∆°i N∆∞·ªõc Philips',
        'B√†n ·ªßi h∆°i n∆∞·ªõc 2400W',
        'BU-PHL-2400',
        '8901234567904',
        1590000,
        1200000,
        'chi·∫øc',
        8,
        40,
        categoryMap.get('GD'),
      ],
      [
        'V·ª£t Tennis Wilson Pro Staff',
        'V·ª£t tennis chuy√™n nghi·ªáp',
        'VT-WIL-PS97',
        '8901234567905',
        4990000,
        3800000,
        'chi·∫øc',
        4,
        20,
        categoryMap.get('TS'),
      ],
      [
        'B√≥ng ƒê√° Adidas FIFA World Cup',
        'B√≥ng ƒë√° thi ƒë·∫•u ch√≠nh th·ª©c',
        'BD-ADI-FIFA',
        '8901234567906',
        890000,
        650000,
        'qu·∫£',
        20,
        100,
        categoryMap.get('TS'),
      ],
      [
        'Th·∫£m Yoga Premium',
        'Th·∫£m yoga ch·ªëng tr∆∞·ª£t cao c·∫•p',
        'TY-PRM-180',
        '8901234567907',
        590000,
        400000,
        'chi·∫øc',
        15,
        75,
        categoryMap.get('TS'),
      ],
    ];

    for (const product of products) {
      await connection.execute(
        `
        INSERT IGNORE INTO products (name, description, sku, barcode, price, cost_price, unit, min_stock_level, max_stock_level, category_id, is_active, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, true, NOW())
      `,
        product,
      );
    }

    // Get warehouse and product IDs
    const [warehouses] = await connection.execute(
      'SELECT id, code FROM warehouses',
    );
    const [productList] = await connection.execute(
      'SELECT id, sku, min_stock_level, max_stock_level FROM products',
    );

    // Insert Inventory Items
    console.log('üì¶ Inserting inventory items...');
    for (const warehouse of warehouses as any[]) {
      for (const product of productList as any[]) {
        const minStock = product.min_stock_level || 0;
        const maxStock = product.max_stock_level || 100;
        const quantity =
          Math.floor(Math.random() * (maxStock - minStock + 1)) + minStock;
        const reservedQuantity = Math.floor(quantity * 0.05); // 5% reserved

        await connection.execute(
          `
          INSERT IGNORE INTO inventory_items (quantity, reserved_quantity, location, product_id, warehouse_id, last_stock_check, created_at)
          VALUES (?, ?, ?, ?, ?, NOW(), NOW())
        `,
          [
            quantity,
            reservedQuantity,
            `${warehouse.code}-A${Math.floor(Math.random() * 5) + 1}-${Math.floor(Math.random() * 20) + 1}`,
            product.id,
            warehouse.id,
          ],
        );

        // Create initial stock transaction
        const [inventoryResult] = await connection.execute(
          'SELECT id FROM inventory_items WHERE product_id = ? AND warehouse_id = ?',
          [product.id, warehouse.id],
        );

        if ((inventoryResult as any[]).length > 0) {
          await connection.execute(
            `
            INSERT INTO inventory_transactions (type, quantity, quantity_before, quantity_after, reference, notes, user_id, inventory_item_id, transaction_date, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
          `,
            [
              'IN',
              quantity,
              0,
              quantity,
              `INIT-${Date.now()}`,
              'Nh·∫≠p kho ban ƒë·∫ßu',
              1,
              (inventoryResult as any[])[0].id,
            ],
          );
        }
      }
    }

    console.log('‚úÖ Simple seed completed successfully!');

    // Show summary
    const [categoryCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM categories',
    );
    const [warehouseCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM warehouses',
    );
    const [productCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM products',
    );
    const [inventoryCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM inventory_items',
    );
    const [transactionCount] = await connection.execute(
      'SELECT COUNT(*) as count FROM inventory_transactions',
    );

    console.log('\nüìä Database Summary:');
    console.log(`   üìÇ Categories: ${(categoryCount as any[])[0].count}`);
    console.log(`   üè¢ Warehouses: ${(warehouseCount as any[])[0].count}`);
    console.log(`   üì± Products: ${(productCount as any[])[0].count}`);
    console.log(`   üì¶ Inventory Items: ${(inventoryCount as any[])[0].count}`);
    console.log(`   üìã Transactions: ${(transactionCount as any[])[0].count}`);
  } catch (error) {
    console.error('‚ùå Simple seed failed:', error);
    process.exit(1);
  } finally {
    await connection.end();
  }
}

runSimpleSeed();
